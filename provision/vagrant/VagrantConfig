# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|

  cpus_config = "#{data['vm']['cpus']}"
  mem_config = "#{data['vm']['memory']}"

  if data['vm']['hostname'].to_s.strip.length != 0
    config.vm.hostname = "#{data['vm']['hostname']}"
  end

  #Use this method as it checks for cygwin, etc as well
  if Vagrant::Util::Platform.windows?
    #cpu info
    cpus = `wmic computersystem get numberoflogicalprocessors`.split("\n")[2].to_i / 2
    #mem info
    mem = `wmic OS get TotalVisibleMemorySize`.split("\n")[2].to_i / 1024 / 4
  end

  if host =~ /linux/
    cpus = `nproc`.to_i / 2
    # meminfo shows KB and we need to convert to MB
    mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4
  end

  # Give VM 1/4 system memory & access to all cpu cores on the host
  if host =~ /darwin/
    cpus = `sysctl -n hw.ncpu`.to_i / 2
    # sysctl returns Bytes and we need to convert to MB
    mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
  end

  unless cpus_config == ''
    cpus = cpus_config
  end

  unless mem_config == ''
    mem = mem_config
  end

  cpus = cpus.ceil

  #Plugin config
  if Vagrant.has_plugin?("vagrant-cachier")
      # Configure cached packages to be shared between instances of the same base box.
      # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
      config.cache.scope = :box
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.define :dbserver do |dbserver|
    dbserver.vm.box = "#{data['vm']['box']}"

    dbserver.vm.network 'private_network', ip: "#{data['vm']['network']['private_network']}"

    data['vm']['network']['forwarded_port'].each do |i, port|
      if port['guest'] != '' && port['host'] != ''
        dbserver.vm.network :forwarded_port, guest: port['guest'].to_i, host: port['host'].to_i, auto_correct: true
      end
    end

    config.vm.usable_port_range = (data['vm']['usable_port_range']['start'].to_i..data['vm']['usable_port_range']['stop'].to_i)

    data['vm']['synced_folder'].each do |i, folder|
      if folder['source'] != '' && folder['target'] != ''
        sync_owner = !folder['owner'].nil? ? folder['owner'] : 'vagrant'
        sync_group = !folder['group'].nil? ? folder['group'] : 'www-data'

        dbserver.vm.synced_folder "#{folder['source']}", "/mnt/vagrant-#{i}", id: "#{i}", type: 'nfs'
        dbserver.bindfs.bind_folder "/mnt/vagrant-#{i}", "#{folder['target']}", owner: sync_owner, group: sync_group, perms: "u=rwX:g=rwX:o=rD"
      end
    end

    if data['vm']['chosen_provider'].empty? || data['vm']['chosen_provider'] == 'virtualbox'
      ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

      dbserver.vm.provider :virtualbox do |virtualbox|
        data['vm']['provider']['virtualbox']['modifyvm'].each do |key, value|
          if key == 'memory'
            next
          end

          if key == 'cpus'
            next
          end

          if key == 'natdnshostresolver1'
            value = value ? 'on' : 'off'
          end

          virtualbox.customize ['modifyvm', :id, "--#{key}", "#{value}"]
        end

        virtualbox.customize ['modifyvm', :id, '--memory', mem]
        virtualbox.customize ['modifyvm', :id, '--cpus', cpus]
      end
    end

    if data['vm']['chosen_provider'].empty? || data['vm']['chosen_provider'] == 'libvirt'
      ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
      dbserver.vm.provider :libvirt do |libvirt|
        libvirt.memory = mem
        libvirt.cpus = cpus

        data['vm']['provider']['libvirt'].each do |key, value|
          libvirt.send("#{key}=", value)
        end
        
      end
    end

    config.vm.provision 'shell' do |s|
      s.path = "provision/shellScripts/swap.sh"
    end

    config.vm.provision "shell", inline: "sudo apt-get update"
    config.vm.provision "shell", inline: "sudo apt-get upgrade -y"

    if data['server']['install'] == '1'
      data['server']['packages'].each do |i, value|
        config.vm.provision 'shell' do |s|
          s.path = "provision/shellScripts/install-packages.sh"
          s.args = i
        end
      end
    end

    config.vm.provision 'shell' do |s|
      s.path = "provision/shellScripts/initial-setup.sh"
    end

    config.vm.provision 'shell' do |s|
      s.path = "provision/shellScripts/project-dependencies.sh"
    end

    config.vm.provision 'shell' do |s|
      s.path = "provision/shellScripts/shell.sh"
    end

    config.vm.provision 'shell' do |s|
      s.path = "provision/shellScripts/ssh-keygen.sh"
    end
    
  end
end
